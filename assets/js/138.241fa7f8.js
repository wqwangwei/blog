(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{423:function(t,e,s){"use strict";s.r(e);var a=s(12),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"调用类的方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#调用类的方法"}},[t._v("#")]),t._v(" 调用类的方法")]),t._v(" "),s("blockquote",[s("p",[t._v("引用自 "),s("a",{attrs:{href:"http://www.importnew.com/23902.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入分析Java方法反射的实现原理"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"方法反射实例"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#方法反射实例"}},[t._v("#")]),t._v(" 方法反射实例")]),t._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReflectCase")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Exception")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),t._v(" target "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Method")]),t._v(" method "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDeclaredMethod")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"run"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        method"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("invoke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Proxy")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"run"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br")])]),s("p",[t._v("通过Java的反射机制，可以在运行期间调用对象的任何方法，如果大量使用这种方式进行调用，会有性能或内存隐患么？为了彻底了解方法的反射机制，只能从底层代码入手了。")]),t._v(" "),s("h2",{attrs:{id:"method获取"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method获取"}},[t._v("#")]),t._v(" Method获取")]),t._v(" "),s("p",[t._v("调用Class类的getDeclaredMethod可以获取指定方法名和参数的方法对象Method。")]),t._v(" "),s("h3",{attrs:{id:"getdeclaredmethod"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#getdeclaredmethod"}},[t._v("#")]),t._v(" getDeclaredMethod")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/getDeclaredMethod.png",alt:"getDeclaredMethod"}})]),t._v(" "),s("p",[t._v("其中privateGetDeclaredMethods方法从缓存或JVM中获取该Class中申明的方法列表，searchMethods方法将从返回的方法列表里找到一个匹配名称和参数的方法对象。")]),t._v(" "),s("h3",{attrs:{id:"searchmethods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#searchmethods"}},[t._v("#")]),t._v(" searchMethods")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/searchMethods.png",alt:"searchMethods"}})]),t._v(" "),s("p",[t._v("如果找到一个匹配的Method，则重新copy一份返回，即Method.copy()方法")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/copy.png",alt:"copy"}})]),t._v(" "),s("p",[t._v("所以每次调用getDeclaredMethod方法返回的Method对象其实都是一个新的对象，且新对象的root属性都指向原来的Method对象，如果需要频繁调用，最好把Method对象缓存起来。")]),t._v(" "),s("h3",{attrs:{id:"privategetdeclaredmethods"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#privategetdeclaredmethods"}},[t._v("#")]),t._v(" privateGetDeclaredMethods")]),t._v(" "),s("p",[t._v("从缓存或JVM中获取该Class中申明的方法列表，实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/privateGetDeclaredMethods.png",alt:"privateGetDeclaredMethods"}})]),t._v(" "),s("p",[t._v("其中reflectionData()方法实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/reflectionData.png",alt:"reflectionData"}})]),t._v(" "),s("p",[t._v("这里有个比较重要的数据结构ReflectionData，用来缓存从JVM中读取类的如下属性数据：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/ReflectionData-struct.png",alt:"ReflectionData-struct"}})]),t._v(" "),s("p",[t._v("从reflectionData()方法实现可以看出：reflectionData对象是SoftReference类型的，说明在内存紧张时可能会被回收，不过也可以通过-XX:SoftRefLRUPolicyMSPerMB参数控制回收的时机，只要发生GC就会将其回收，如果reflectionData被回收之后，又执行了反射方法，那只能通过newReflectionData方法重新创建一个这样的对象了，newReflectionData方法实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/newReflectionData.png",alt:"newReflectionData"}})]),t._v(" "),s("p",[t._v("通过unsafe.compareAndSwapObject方法重新设置reflectionData字段；")]),t._v(" "),s("p",[t._v("在privateGetDeclaredMethods方法中，如果通过reflectionData()获得的ReflectionData对象不为空，则尝试从ReflectionData对象中获取declaredMethods属性，如果是第一次，或则被GC回收之后，重新初始化后的类属性为空，则需要重新到JVM中获取一次，并赋值给ReflectionData，下次调用就可以使用缓存数据了。")]),t._v(" "),s("h2",{attrs:{id:"method调用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#method调用"}},[t._v("#")]),t._v(" Method调用")]),t._v(" "),s("p",[t._v("获取到指定的方法对象Method之后，就可以调用它的invoke方法了，invoke实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/invoke.png",alt:"invoke"}})]),t._v(" "),s("p",[t._v("应该注意到：这里的MethodAccessor对象是invoke方法实现的关键，一开始methodAccessor为空，需要调用acquireMethodAccessor生成一个新的MethodAccessor对象，MethodAccessor本身就是一个接口，实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/MethodAccessor.png",alt:"MethodAccessor"}})]),t._v(" "),s("p",[t._v("在acquireMethodAccessor方法中，会通过ReflectionFactory类的newMethodAccessor创建一个实现了MethodAccessor接口的对象，实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/newMethodAccessor.png",alt:"newMethodAccessor"}})]),t._v(" "),s("p",[t._v("在ReflectionFactory类中，有2个重要的字段：noInflation(默认false)和inflationThreshold(默认15)，在checkInitted方法中可以通过-Dsun.reflect.inflationThreshold=xxx和-Dsun.reflect.noInflation=true对这两个字段重新设置，而且只会设置一次；")]),t._v(" "),s("p",[t._v("如果noInflation为false，方法newMethodAccessor都会返回DelegatingMethodAccessorImpl对象，DelegatingMethodAccessorImpl的类实现")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/DelegatingMethodAccessorImpl.png",alt:"DelegatingMethodAccessorImpl"}})]),t._v(" "),s("p",[t._v("其实，DelegatingMethodAccessorImpl对象就是一个代理对象，负责调用被代理对象delegate的invoke方法，其中delegate参数目前是NativeMethodAccessorImpl对象，所以最终Method的invoke方法调用的是NativeMethodAccessorImpl对象invoke方法，实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/NativeMethodAccessorImpl.png",alt:"NativeMethodAccessorImpl"}})]),t._v(" "),s("p",[t._v("这里用到了ReflectionFactory类中的inflationThreshold，当delegate调用了15次invoke方法之后，如果继续调用就通过MethodAccessorGenerator类的generateMethod方法生成MethodAccessorImpl对象，并设置为delegate对象，这样下次执行Method.invoke时，就调用新建的MethodAccessor对象的invoke()方法了。")]),t._v(" "),s("p",[t._v("这里需要注意的是：\ngenerateMethod方法在生成MethodAccessorImpl对象时，会在内存中生成对应的字节码，并调用ClassDefiner.defineClass创建对应的class对象，实现如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/doPrivileged.png",alt:"doPrivileged"}})]),t._v(" "),s("p",[t._v("在ClassDefiner.defineClass方法实现中，每被调用一次都会生成一个DelegatingClassLoader类加载器对象")]),t._v(" "),s("p",[s("img",{attrs:{src:"/images/%E5%8F%8D%E5%B0%84-%E8%B0%83%E7%94%A8%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95/defineClass.png",alt:"defineClass"}})]),t._v(" "),s("p",[t._v("这里每次都生成新的类加载器，是为了性能考虑，在某些情况下可以卸载这些生成的类，因为类的卸载是只有在类加载器可以被回收的情况下才会被回收的，如果用了原来的类加载器，那可能导致这些新创建的类一直无法被卸载，从其设计来看本身就不希望这些类一直存在内存里的，在需要的时候有就行了。")])])}),[],!1,null,null,null);e.default=n.exports}}]);