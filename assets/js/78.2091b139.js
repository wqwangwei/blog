(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{509:function(t,e,r){"use strict";r.r(e);var v=r(12),s=Object(v.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"观察者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#观察者模式"}},[t._v("#")]),t._v(" 观察者模式")]),t._v(" "),r("p",[t._v("观察者模式通常也叫 "),r("strong",[t._v("发布-订阅")]),t._v(" 模式，或者事件监听模式，定义一对多的依赖关系，让多个观察者对象同时监听一个主题对象，如果这个主体对象的状态发生变化时，会通知所有的观察者对象。异步消息（MQ、ActiveMQ）都是基于这种模式。")]),t._v(" "),r("p",[r("strong",[t._v("类结构")])]),t._v(" "),r("p",[r("img",{attrs:{src:"/images/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/observer.png",alt:"observer"}})]),t._v(" "),r("p",[t._v("Subject：主题类，将所有的观察者对象保存在一个List集合中，并提供增、删方法，以及状态变化后的通知方法。")]),t._v(" "),r("p",[t._v("Observer：观察者的抽象接口，提供了一个抽象的动作方法，具体的业务由子类来实现。")]),t._v(" "),r("p",[t._v("ConcreteObserver：具体的观察者，负责实现自己的业务动作。")]),t._v(" "),r("p",[t._v("ConcreteSubject：具体的主题类，在内部状态发生变化时，给所有登记过的观察者发出通知。")]),t._v(" "),r("p",[r("strong",[t._v("优点")])]),t._v(" "),r("ul",[r("li",[r("p",[t._v("解耦，将耦合的双方都依赖于抽象类，而不是依赖于具体。从而使得各自的变化不会影响到另一边的变化。")])]),t._v(" "),r("li",[r("p",[t._v("Observer采用的是抽象类，这样的好处是可以将多个子类相同的代码逻辑抽取出来，放到抽象类中。")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);