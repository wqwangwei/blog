(window.webpackJsonp=window.webpackJsonp||[]).push([[88],{495:function(t,a,s){"use strict";s.r(a);var e=s(12),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"幂等操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幂等操作"}},[t._v("#")]),t._v(" 幂等操作")]),t._v(" "),s("blockquote",[s("p",[t._v("引用自 "),s("a",{attrs:{href:"https://www.iteye.com/blog/825635381-2276077",target:"_blank",rel:"noopener noreferrer"}},[t._v("高并发的核心技术-幂等的实现方案"),s("OutboundLink")],1)])]),t._v(" "),s("h2",{attrs:{id:"幂等性概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幂等性概念"}},[t._v("#")]),t._v(" 幂等性概念")]),t._v(" "),s("p",[t._v("幂等（idempotent、idempotence）是一个数字与计算机学概念，常见于抽象代数中。")]),t._v(" "),s("p",[t._v("在编程中，一个幂等操作的特点是其任意多次执行所产生的影响均与一次执行的影响相同。幂等函数，或幂等方法，是指可以使用相同参数重复执行，并能获得相同结果的函数。这些函数不会影响系统状态，也不用担心重复执行会对系统造成改变。例如，"),s("code",[t._v("getUsername()")]),t._v(" 和 "),s("code",[t._v("setTrue()")]),t._v(" 函数就是幂等函数。")]),t._v(" "),s("h2",{attrs:{id:"应用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#应用场景"}},[t._v("#")]),t._v(" 应用场景")]),t._v(" "),s("p",[t._v("以下是一些常见场景：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("前端重复提交选中的数据，应该后台只产生对应这个数据的一个响应结果。")])]),t._v(" "),s("li",[s("p",[t._v("我们发起一笔付款请求，应该只扣用户账户一次钱，当遇到网络重发或系统bug重发，也应该只扣一次钱。")])]),t._v(" "),s("li",[s("p",[t._v("发送消息，也应该只发一次，同样的短信发给用户，用户会哭的。")])]),t._v(" "),s("li",[s("p",[t._v("创建业务订单，一次业务请求只能创建一个，创建多个就会出大问题。")])])]),t._v(" "),s("h2",{attrs:{id:"技术方案"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技术方案"}},[t._v("#")]),t._v(" 技术方案")]),t._v(" "),s("h3",{attrs:{id:"查询操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#查询操作"}},[t._v("#")]),t._v(" 查询操作")]),t._v(" "),s("p",[t._v("查询一次和查询多次，在数据不变的情况下，查询结果是一样的。select是天然的幂等操作。")]),t._v(" "),s("h3",{attrs:{id:"删除操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#删除操作"}},[t._v("#")]),t._v(" 删除操作")]),t._v(" "),s("p",[t._v("删除操作也是幂等的，删除一次和多此删除都是把数据删除。（注意可能返回结果不一样，删除的数据不存在，返回0，删除的数据多条，返回结果多个）。")]),t._v(" "),s("h3",{attrs:{id:"唯一索引，防止新增脏数据"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#唯一索引，防止新增脏数据"}},[t._v("#")]),t._v(" 唯一索引，防止新增脏数据")]),t._v(" "),s("p",[t._v("比如：支付宝的资金账户，支付宝也有用户账户，每个用户只能有一个资金账户，怎么防止给用户创建多个资金账户，可以给资金账户表中的用户ID加唯一索引，所以一个用户只能新增成功一个资金账户记录。")]),t._v(" "),s("p",[t._v("使用唯一索引或唯一组合索引来防止新增数据存在脏数据（当表存在唯一索引，并发时新增报错，再查询一次就可以了，数据应该已经存在了，返回结果即可）。")]),t._v(" "),s("h3",{attrs:{id:"token机制，防止页面重复提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#token机制，防止页面重复提交"}},[t._v("#")]),t._v(" token机制，防止页面重复提交")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("业务要求：页面的数据只能被点击提交一次")])]),t._v(" "),s("li",[s("p",[t._v("发生原因：由于重复点击或者网络重发，或者nginx重发等情况会导致数据被重复提交")])]),t._v(" "),s("li",[s("p",[t._v("解决办法：")]),t._v(" "),s("ul",[s("li",[t._v("集群环境：采用token加redis（redis单线程的，处理需要排队）")]),t._v(" "),s("li",[t._v("单JVM环境：采用token加redis或者token加jvm内存")])])]),t._v(" "),s("li",[s("p",[t._v("处理流程：")]),t._v(" "),s("ol",[s("li",[t._v("数据提交前要向服务申请token，token放到redis或jvm内存中，设置token有效时间")]),t._v(" "),s("li",[t._v("提交后后台校验token，同时删除token，生成新的token返回")])])]),t._v(" "),s("li",[s("p",[t._v("token特点：要申请，一次有效性，可以限流")])])]),t._v(" "),s("p",[t._v("redis要用删除操作来判断token，删除成功代表token校验通过，如果用 select + delete 来校验token，存在并发问题，不建议使用。")]),t._v(" "),s("h3",{attrs:{id:"悲观锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁"}},[t._v("#")]),t._v(" 悲观锁")]),t._v(" "),s("p",[t._v("获取数据时加锁获取")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" table_xxx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'xxx'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("注意：id字段一定是主键或者唯一索引，否则会导致锁表。")]),t._v(" "),s("p",[t._v("悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，根据实际情况选用。")]),t._v(" "),s("h3",{attrs:{id:"乐观锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁"}},[t._v("#")]),t._v(" 乐观锁")]),t._v(" "),s("p",[t._v("乐观锁只是在更新数据那一刻锁表，其他时间不锁表，所以相对于悲观锁，效率更高。")]),t._v(" "),s("p",[t._v("乐观锁的实现方式多种多样可以通过version或者其他状态条件：")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("通过版本号实现")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" table_xxx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#name#,version=version+1 where version=#version#")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[s("img",{attrs:{src:"http://dl2.iteye.com/upload/attachment/0115/0360/cc01c65f-be67-3fdf-adba-edf7f46ce86a.png",alt:"乐观锁-版本号"}})])]),t._v(" "),s("li",[s("p",[t._v("通过条件限制")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" table_xxx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" avai_amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("avai_amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#subAmount# where avai_amount-#subAmount# >= 0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("要求：quality-#subQuality# >= ，这个情景适合不用版本号，只更新是做数据安全校验，适合库存模型，扣份额和回滚份额，性能更高")]),t._v(" "),s("p",[t._v("注意：乐观锁的更新操作，最好用主键或者唯一索引来更新,这样是行锁，否则更新时会锁表，上面两个sql改成下面的两个更好")]),t._v(" "),s("div",{staticClass:"language-sql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" table_xxx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" name"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#name#,version=version+1 where id=#id# and version=#version#")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" table_xxx "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" avai_amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("avai_amount"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#subAmount# where id=#id# and avai_amount-#subAmount# >= 0")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])])])]),t._v(" "),s("h3",{attrs:{id:"分布式锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分布式锁"}},[t._v("#")]),t._v(" 分布式锁")]),t._v(" "),s("p",[t._v("还是拿插入数据的例子，如果是分布是系统，构建全局唯一索引比较困难，例如唯一性的字段没法确定，这时候可以引入分布式锁，通过第三方的系统(redis或zookeeper)，在业务系统插入数据或者更新数据，获取分布式锁，然后做操作，之后释放锁，这样其实是把多线程并发的锁的思路，引入多多个系统，也就是分布式系统中得解决思路。")]),t._v(" "),s("p",[t._v("要点：某个长流程处理过程要求不能并发执行，可以在流程执行之前根据某个标志(用户ID+后缀等)获取分布式锁，其他流程执行时获取锁就会失败，也就是同一时间该流程只能有一个能执行成功，执行完成后，释放分布式锁(分布式锁要第三方系统提供)。")]),t._v(" "),s("h3",{attrs:{id:"select-insert"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#select-insert"}},[t._v("#")]),t._v(" select + insert")]),t._v(" "),s("p",[t._v("并发不高的后台系统，或者一些任务JOB，为了支持幂等，支持重复执行，简单的处理方法是，先查询下一些关键数据，判断是否已经执行过，在进行业务处理，就可以了")]),t._v(" "),s("p",[t._v("注意：核心高并发流程不要用这种方法")]),t._v(" "),s("h3",{attrs:{id:"状态机幂等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#状态机幂等"}},[t._v("#")]),t._v(" 状态机幂等")]),t._v(" "),s("p",[t._v("在设计单据相关的业务，或者是任务相关的业务，肯定会涉及到状态机(状态变更图)，就是业务单据上面有个状态，状态在不同的情况下会发生变更，一般情况下存在有限状态机，这时候，如果状态机已经处于下一个状态，这时候来了一个上一个状态的变更，理论上是不能够变更的，这样的话，保证了有限状态机的幂等。")]),t._v(" "),s("p",[t._v("注意：订单等单据类业务，存在很长的状态流转，一定要深刻理解状态机，对业务系统设计能力提高有很大帮助")]),t._v(" "),s("h3",{attrs:{id:"对外提供接口的api如何保证幂等"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对外提供接口的api如何保证幂等"}},[t._v("#")]),t._v(" 对外提供接口的api如何保证幂等")]),t._v(" "),s("p",[t._v("如银联提供的付款接口：需要接入商户提交付款请求时附带：source来源，seq序列号，source+seq在数据库里面做唯一索引，防止多次付款，(并发时，只能处理一个请求)")]),t._v(" "),s("p",[t._v("重点：对外提供接口为了支持幂等调用，接口有两个字段必须传，一个是来源source，一个是来源方序列号seq，这个两个字段在提供方系统里面做联合唯一索引，这样当第三方调用时，先在本方系统里面查询一下，是否已经处理过，返回相应处理结果；没有处理过，进行相应处理，返回结果。注意，为了幂等友好，一定要先查询一下，是否处理过该笔业务，不查询直接插入业务系统，会报错，但实际已经处理了。")]),t._v(" "),s("h2",{attrs:{id:"总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),s("p",[t._v("幂等性应该是合格程序员的一个基因，在设计系统时，是首要考虑的问题，尤其是在向支付宝，银行，互联网金融公司等涉及的都是钱的系统，既要高效，数据也要准确，所以不能出现多扣款，多打款等问题，这样会很难处理，用户体验也不好。")])])}),[],!1,null,null,null);a.default=r.exports}}]);