(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{510:function(_,v,t){"use strict";t.r(v);var d=t(12),r=Object(d.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("h1",{attrs:{id:"gof的23种设计模式的分类和功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gof的23种设计模式的分类和功能"}},[_._v("#")]),_._v(" GoF的23种设计模式的分类和功能")]),_._v(" "),t("h2",{attrs:{id:"设计模式分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#设计模式分类"}},[_._v("#")]),_._v(" 设计模式分类")]),_._v(" "),t("p",[_._v("设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用范围来分。")]),_._v(" "),t("h3",{attrs:{id:"_1-根据目的分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-根据目的分类"}},[_._v("#")]),_._v(" 1. 根据目的分类")]),_._v(" "),t("p",[_._v("根据模式是用来完成什么工作来划分，这种方式可分为"),t("strong",[_._v("创建型模式")]),_._v("、"),t("strong",[_._v("结构型模式")]),_._v("和"),t("strong",[_._v("行为型模式")]),_._v("3种。")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("创建型模式：用于描述”怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。")])]),_._v(" "),t("li",[t("p",[_._v("结构型模式：用于描述如何将类或对象按某种布局组成更大的结构。")])]),_._v(" "),t("li",[t("p",[_._v("行为型模式：用于描述类或对象之间怎样互相协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。")])])]),_._v(" "),t("h3",{attrs:{id:"_2-根据作用范围分类"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-根据作用范围分类"}},[_._v("#")]),_._v(" 2. 根据作用范围分类")]),_._v(" "),t("p",[_._v("根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为"),t("strong",[_._v("类模式")]),_._v("和"),t("strong",[_._v("对象模式")]),_._v("两种。")]),_._v(" "),t("ol",[t("li",[t("p",[_._v("类模式：用于处理类与子类之间的关系，这些关系通过集成来建立，是静态的，在编译时便确定下来了。")])]),_._v(" "),t("li",[t("p",[_._v("对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。")])])]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("范围/目的")]),_._v(" "),t("th",[_._v("创建型模式")]),_._v(" "),t("th",[_._v("结构型模式")]),_._v(" "),t("th",[_._v("行为型模式")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("类模式")]),_._v(" "),t("td",[_._v("工厂方法")]),_._v(" "),t("td",[_._v("（类）适配器")]),_._v(" "),t("td",[_._v("模板方法；解释器")])]),_._v(" "),t("tr",[t("td",[_._v("对象模式")]),_._v(" "),t("td",[_._v("单例；原型；抽象工厂；建造者")]),_._v(" "),t("td",[_._v("代理；（对象）适配器；桥接；装饰；外观；享元；组合")]),_._v(" "),t("td",[_._v("策略；命令；职责链；状态；观察者；中介者；迭代器；访问者；备忘录")])])])]),_._v(" "),t("h2",{attrs:{id:"gof的23种设计模式的功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#gof的23种设计模式的功能"}},[_._v("#")]),_._v(" GoF的23种设计模式的功能")]),_._v(" "),t("table",[t("thead",[t("tr",[t("th",[_._v("模式名")]),_._v(" "),t("th",[_._v("英文名")]),_._v(" "),t("th",[_._v("功能")])])]),_._v(" "),t("tbody",[t("tr",[t("td",[_._v("单例模式")]),_._v(" "),t("td",[_._v("Singleton")]),_._v(" "),t("td",[_._v("某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，其拓展是有限多例模式。")])]),_._v(" "),t("tr",[t("td",[_._v("原型模式")]),_._v(" "),t("td",[_._v("Prototype")]),_._v(" "),t("td",[_._v("将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。")])]),_._v(" "),t("tr",[t("td",[_._v("工厂方法模式")]),_._v(" "),t("td",[_._v("Factory Method")]),_._v(" "),t("td",[_._v("定义一个用于创建产品的接口，由子类决定生产什么产品。")])]),_._v(" "),t("tr",[t("td",[_._v("抽象工厂模式")]),_._v(" "),t("td",[_._v("AbstractFactory")]),_._v(" "),t("td",[_._v("提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。")])]),_._v(" "),t("tr",[t("td",[_._v("建造者模式")]),_._v(" "),t("td",[_._v("Builder")]),_._v(" "),t("td",[_._v("将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。")])]),_._v(" "),t("tr",[t("td",[_._v("代理模式")]),_._v(" "),t("td",[_._v("Proxy")]),_._v(" "),t("td",[_._v("为某对象提供一种代理以控制对该对象的访问。即客户端通过代理间接地访问该对象，从而限制、增强或修改该对象的一些特性。")])]),_._v(" "),t("tr",[t("td",[_._v("适配器模式")]),_._v(" "),t("td",[_._v("Adapter")]),_._v(" "),t("td",[_._v("将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。")])]),_._v(" "),t("tr",[t("td",[_._v("桥接模式")]),_._v(" "),t("td",[_._v("Bridge")]),_._v(" "),t("td",[_._v("将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。")])]),_._v(" "),t("tr",[t("td",[_._v("装饰模式")]),_._v(" "),t("td",[_._v("Decorator")]),_._v(" "),t("td",[_._v("动态地给对象增加一些职责，即增加其额外地功能。")])]),_._v(" "),t("tr",[t("td",[_._v("外观模式")]),_._v(" "),t("td",[_._v("Facade")]),_._v(" "),t("td",[_._v("为多个复杂地子系统提供一个一致地接口，使这些子系统更加容易被访问。")])]),_._v(" "),t("tr",[t("td",[_._v("享元模式")]),_._v(" "),t("td",[_._v("Flyweight")]),_._v(" "),t("td",[_._v("运用共享技术来有效地支持大量细粒度对象地复用。")])]),_._v(" "),t("tr",[t("td",[_._v("组合模式")]),_._v(" "),t("td",[_._v("Composite")]),_._v(" "),t("td",[_._v("将对象组合成树状层次结构，使用户对单个对象和组合对象具有一致的访问性。")])]),_._v(" "),t("tr",[t("td",[_._v("模板方法模式")]),_._v(" "),t("td",[_._v("Template Method")]),_._v(" "),t("td",[_._v("定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。")])]),_._v(" "),t("tr",[t("td",[_._v("策略模式")]),_._v(" "),t("td",[_._v("Strategy")]),_._v(" "),t("td",[_._v("定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的改变不会影响使用算法的客户。")])]),_._v(" "),t("tr",[t("td",[_._v("命令模式")]),_._v(" "),t("td",[_._v("Command")]),_._v(" "),t("td",[_._v("将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分隔开。")])]),_._v(" "),t("tr",[t("td",[_._v("职责链模式")]),_._v(" "),t("td",[_._v("Chain of Responsibility")]),_._v(" "),t("td",[_._v("把请求从链中的一个对象传到下一个对象，直到请求被响应为止。通过这种方式去除对象之间的耦合。")])]),_._v(" "),t("tr",[t("td",[_._v("状态模式")]),_._v(" "),t("td",[_._v("State")]),_._v(" "),t("td",[_._v("允许一个对象在其内部状态发生改变时改变其行为能力。")])]),_._v(" "),t("tr",[t("td",[_._v("观察者模式")]),_._v(" "),t("td",[_._v("Observer")]),_._v(" "),t("td",[_._v("多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。")])]),_._v(" "),t("tr",[t("td",[_._v("中介者模式")]),_._v(" "),t("td",[_._v("Mediator")]),_._v(" "),t("td",[_._v("定义一个中介对象来简化原有对象之间的交互关系，降低系统中对象间的耦合度，使原有对象之间不必相互了解。")])]),_._v(" "),t("tr",[t("td",[_._v("迭代器模式")]),_._v(" "),t("td",[_._v("Iterator")]),_._v(" "),t("td",[_._v("提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。")])]),_._v(" "),t("tr",[t("td",[_._v("访问者模式")]),_._v(" "),t("td",[_._v("Visitor")]),_._v(" "),t("td",[_._v("在不改变集合元素的前提下，为一个集合中的每个元素提供多种访问方式，即每个元素有多个访问者对象访问。")])]),_._v(" "),t("tr",[t("td",[_._v("备忘录模式")]),_._v(" "),t("td",[_._v("Memento")]),_._v(" "),t("td",[_._v("在不破坏封装性的前提下，获取并保存一个对象的内部状态，以便以后恢复它。")])]),_._v(" "),t("tr",[t("td",[_._v("解释器模式")]),_._v(" "),t("td",[_._v("Interpreter")]),_._v(" "),t("td",[_._v("提供如何定义语言的文法，以及对语言句子的解释方法，即解释器。")])])])]),_._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/yupaits/study-java/blob/master/src/main/java/designpattern",target:"_blank",rel:"noopener noreferrer"}},[_._v("代码示例"),t("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);