(window.webpackJsonp=window.webpackJsonp||[]).push([[144],{418:function(e,t,r){"use strict";r.r(t);var a=r(12),u=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"queue相关"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#queue相关"}},[e._v("#")]),e._v(" Queue相关")]),e._v(" "),r("h2",{attrs:{id:"类图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#类图"}},[e._v("#")]),e._v(" 类图")]),e._v(" "),r("p",[r("img",{attrs:{src:"/images/Queue%E7%9B%B8%E5%85%B3/Queue%E7%B1%BB%E5%9B%BE.png",alt:"Queue类图"}})]),e._v(" "),r("p",[e._v('Queue用于模拟"队列"这种数据结构，其特性为FIFO先进先出。队列的头部保存着队列中存放时间最长的元素，队列的尾部保存着队列中存放时间最短的元素。新元素插入（offer）到队列的尾部，访问元素（poll）操作会返回队列头部的元素，队列不允许随机访问元素。')]),e._v(" "),r("h2",{attrs:{id:"queue实现类"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#queue实现类"}},[e._v("#")]),e._v(" Queue实现类")]),e._v(" "),r("h3",{attrs:{id:"priorityqueue"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#priorityqueue"}},[e._v("#")]),e._v(" PriorityQueue")]),e._v(" "),r("p",[e._v("PriorityQueue优先级队列，它并不是一个比较标准的队列实现，PriorityQueue保存元素的顺序并不是按照加入队列的顺序，而是按照队列元素的大小进行排序的。")]),e._v(" "),r("h3",{attrs:{id:"deque"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#deque"}},[e._v("#")]),e._v(" Deque")]),e._v(" "),r("p",[e._v("Deque双端队列接口，双端队列可以同时从两端来添加、删除元素，因此Deque的实现类既可以当成队列使用、也可以当成栈使用。")]),e._v(" "),r("h3",{attrs:{id:"arraydeque"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#arraydeque"}},[e._v("#")]),e._v(" ArrayDeque")]),e._v(" "),r("p",[e._v("ArrayDeque是一个基于数组的双端队列，和ArrayList类似，它们的底层都采用一个可动态扩容的Object[]数组来存储集合元素。")])])}),[],!1,null,null,null);t.default=u.exports}}]);