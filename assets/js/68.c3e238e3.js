(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{525:function(a,r,t){"use strict";t.r(r);var l=t(12),s=Object(l.a)({},(function(){var a=this,r=a.$createElement,t=a._self._c||r;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"深度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深度优先搜索"}},[a._v("#")]),a._v(" 深度优先搜索")]),a._v(" "),t("ul",[t("li",[a._v("深度优先算法是一种优先遍历子节点而不是回溯的算法。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|V| + |E|)")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E7%AE%97%E6%B3%95/dfsbfs.gif",alt:"DFS"}})]),a._v(" "),t("h2",{attrs:{id:"广度优先搜索"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#广度优先搜索"}},[a._v("#")]),a._v(" 广度优先搜索")]),a._v(" "),t("ul",[t("li",[a._v("广度优先搜索是优先遍历邻居节点而不是子节点的图遍历算法。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|V| + |E|)")])]),a._v(" "),t("h2",{attrs:{id:"拓扑排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#拓扑排序"}},[a._v("#")]),a._v(" 拓扑排序")]),a._v(" "),t("ul",[t("li",[a._v("拓扑排序是对于有向图节点的线性排序，如果存在某条从 u 到 v 的边，则认为 u 的下标先于 v。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|V| + |E|)")])]),a._v(" "),t("h2",{attrs:{id:"dijkstra算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#dijkstra算法"}},[a._v("#")]),a._v(" Dijkstra算法")]),a._v(" "),t("ul",[t("li",[a._v("Dijkstra 算法 用于计算有向图中单源最短路径问题。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|V|^2)")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E7%AE%97%E6%B3%95/dijkstra.gif",alt:"Dijkstra"}})]),a._v(" "),t("h2",{attrs:{id:"bellman-ford算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#bellman-ford算法"}},[a._v("#")]),a._v(" Bellman-Ford算法")]),a._v(" "),t("ul",[t("li",[a._v("Bellman-Ford 算法是在带权图中计算从单一源点出发到其他节点的最短路径的算法。")]),a._v(" "),t("li",[a._v("尽管算法复杂度大于 Dijkstra 算法，但是它适用于包含了负值边的图。")]),a._v(" "),t("li",[a._v("时间复杂度:\n"),t("ul",[t("li",[a._v("最优时间: O(|E|)")]),a._v(" "),t("li",[a._v("最坏时间: O(|V||E|)")])])])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E7%AE%97%E6%B3%95/bellman-ford.gif",alt:"Bellman-Ford"}})]),a._v(" "),t("h2",{attrs:{id:"floyd-warshall算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#floyd-warshall算法"}},[a._v("#")]),a._v(" Floyd-Warshall算法")]),a._v(" "),t("ul",[t("li",[a._v("Floyd-Warshall 算法 能够用于在无环带权图中寻找任意节点的最短路径。")]),a._v(" "),t("li",[a._v("时间复杂度:\n"),t("ul",[t("li",[a._v("最优时间: O(|V|^3)")]),a._v(" "),t("li",[a._v("最坏时间: O(|V|^3)")]),a._v(" "),t("li",[a._v("平均时间: O(|V|^3)")])])])]),a._v(" "),t("h2",{attrs:{id:"prim算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#prim算法"}},[a._v("#")]),a._v(" Prim算法")]),a._v(" "),t("ul",[t("li",[a._v("Prim 算法是用于在带权无向图中计算最小生成树的贪婪算法。换言之，Prim 算法能够在图中抽取出连接所有节点的边的最小代价子集。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|V|^2)")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E7%AE%97%E6%B3%95/prim.gif",alt:"Prim"}})]),a._v(" "),t("h2",{attrs:{id:"kruskal算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#kruskal算法"}},[a._v("#")]),a._v(" Kruskal算法")]),a._v(" "),t("ul",[t("li",[a._v("Kruskal 算法同样是计算图的最小生成树的算法，与 Prim 的区别在于并不需要图是连通的。")]),a._v(" "),t("li",[a._v("时间复杂度: O(|E|log|V|)")])]),a._v(" "),t("p",[t("img",{attrs:{src:"/images/%E5%9B%BE%E7%AE%97%E6%B3%95/kruskal.gif",alt:"Kruskal"}})])])}),[],!1,null,null,null);r.default=s.exports}}]);