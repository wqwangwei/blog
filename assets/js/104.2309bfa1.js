(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{471:function(a,t,s){"use strict";s.r(t);var e=s(12),n=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"java关键字"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#java关键字"}},[a._v("#")]),a._v(" Java关键字")]),a._v(" "),s("h2",{attrs:{id:"volatile"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#volatile"}},[a._v("#")]),a._v(" volatile")]),a._v(" "),s("p",[a._v("volatile是Java最轻量级的同步机制。")]),a._v(" "),s("p",[s("strong",[a._v("特性：")])]),a._v(" "),s("ul",[s("li",[s("p",[a._v("可见性。变量读写直接操作主存而不是CPU Cache。当一个线程修改了volatile修饰的变量后，无论是否加锁，其他线程都可以立即看到最新的修改。")])]),a._v(" "),s("li",[s("p",[a._v("禁止指令重排序优化。")])]),a._v(" "),s("li",[s("p",[a._v("保证变量可见性，但无法保证原子性。也就是说非线程安全。")])])]),a._v(" "),s("p",[s("strong",[a._v("Java内存模型：")])]),a._v(" "),s("p",[s("img",{attrs:{src:"/images/Java%E5%85%B3%E9%94%AE%E5%AD%97/volatile.png",alt:"volatile"}})]),a._v(" "),s("blockquote",[s("p",[a._v("详情可参考 "),s("a",{attrs:{href:"https://mp.weixin.qq.com/s/mcR8_FHHGA2zb0aW1N02ag?from=groupmessage&isappinstalled=0",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入分析volatile的实现原理"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"synchronized"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#synchronized"}},[a._v("#")]),a._v(" synchronized")]),a._v(" "),s("p",[a._v("线程安全，锁区域内容一次只允许一个线程执行，通过锁机制控制。")]),a._v(" "),s("ol",[s("li",[s("p",[a._v("当两个并发线程访问同一个对象object中的这个synchronized(this)同步代码块时，一个时间内只能有一个线程得到执行。另一个线程必须等待当前线程执行完这个代码块以后才能执行该代码块。")])]),a._v(" "),s("li",[s("p",[a._v("然而，当一个线程访问object的一个synchronized(this)同步代码块时，另一个线程仍然可以访问该object中的非synchronized(this)同步代码块。")])]),a._v(" "),s("li",[s("p",[a._v("尤其关键的是，当一个线程访问object的一个synchronized(this)同步代码块时，其他线程对object中所有其它synchronized(this)同步代码块的访问将被阻塞。")])])]),a._v(" "),s("h3",{attrs:{id:"同步方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步方法"}},[a._v("#")]),a._v(" 同步方法")]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("method")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("每个类实例对应一把锁，类的两个实例没有这个限制。类实例中所有的synchronized方法共用这一把锁，锁的范围有点大。")]),a._v(" "),s("h3",{attrs:{id:"同步块"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#同步块"}},[a._v("#")]),a._v(" 同步块")]),a._v(" "),s("div",{staticClass:"language-Java line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("synchronized")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("syncObject"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//允许访问控制的代码")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("其中的代码执行前必须获得对象 syncObject 锁，可以针对任意代码块，且可以任意指定上锁的对象，故灵活性较高。")]),a._v(" "),s("h2",{attrs:{id:"final"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#final"}},[a._v("#")]),a._v(" final")]),a._v(" "),s("p",[a._v("如果修饰变量标识为常量，运行过程中会将值直接替换到变量这个占位符中（避免根据内存地址再次查找这层消耗）；如果修改方法，方法不允许被覆盖；修饰类，类不允许被继承。")]),a._v(" "),s("p",[a._v("基础类型，如String，不允许修改。")]),a._v(" "),s("p",[a._v("集合，如Map、List，引用地址不允许修改，但可以put、get等操作。")]),a._v(" "),s("p",[a._v("Java8编译会检查，如果是修改常量，会编译失败。")]),a._v(" "),s("h2",{attrs:{id:"static"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#static"}},[a._v("#")]),a._v(" static")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("声明属性")]),a._v(" "),s("p",[a._v("为全局属性，放在全局数据区，只分配一次。")])]),a._v(" "),s("li",[s("p",[a._v("声明方法")]),a._v(" "),s("p",[a._v("类方法，可以由类名直接调用。")])]),a._v(" "),s("li",[s("p",[a._v("声明类")]),a._v(" "),s("p",[a._v("内部类可以用static修饰声明该类为静态内部类。")])])]),a._v(" "),s("h2",{attrs:{id:"transient"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#transient"}},[a._v("#")]),a._v(" transient")]),a._v(" "),s("p",[a._v("如果一个对象中的某个属性不希望被序列化，则可以使用transient关键字进行声明。")])])}),[],!1,null,null,null);t.default=n.exports}}]);