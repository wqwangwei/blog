(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{531:function(_,v,l){"use strict";l.r(v);var i=l(12),t=Object(i.a)({},(function(){var _=this,v=_.$createElement,l=_._self._c||v;return l("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[l("h2",{attrs:{id:"_1、orm组件设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_1、orm组件设计"}},[_._v("#")]),_._v(" 1、ORM组件设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("根据ID获取Entity")]),_._v(" "),l("li",[_._v("根据QueryWrapper获取第一个Entity")]),_._v(" "),l("li",[_._v("根据ID集合获取Entity列表")]),_._v(" "),l("li",[_._v("获取所有Entity列表")]),_._v(" "),l("li",[_._v("根据QueryWrapper获取Entity列表")]),_._v(" "),l("li",[_._v("根据IPage分页查询对象获取Entity分页数据")]),_._v(" "),l("li",[_._v("根据IPage分页查询对象和QueryWrapper获取Entity分页数据")]),_._v(" "),l("li",[_._v("保存Entity（ID不存在插入记录，ID存在更新记录）")]),_._v(" "),l("li",[_._v("批量保存Entity")]),_._v(" "),l("li",[_._v("根据ID删除Entity")]),_._v(" "),l("li",[_._v("根据ID集合批量删除Entity")]),_._v(" "),l("li",[_._v("根据Entity集合批量删除Entity")]),_._v(" "),l("li",[_._v("根据ID获取Vo")]),_._v(" "),l("li",[_._v("根据QueryWrapper获取第一个Vo")]),_._v(" "),l("li",[_._v("根据ID集合获取Vo列表")]),_._v(" "),l("li",[_._v("获取所有Vo列表")]),_._v(" "),l("li",[_._v("根据QueryWrapper获取Vo列表")]),_._v(" "),l("li",[_._v("根据IPage分页查询对象获取Vo分页数据")]),_._v(" "),l("li",[_._v("根据IPage分页查询对象和QueryWrapper获取Vo分页数据")]),_._v(" "),l("li",[_._v("保存Dto（ID不存在插入记录，ID存在更新记录）")]),_._v(" "),l("li",[_._v("批量保存Dto")]),_._v(" "),l("li",[_._v("根据ID集合统计数量")]),_._v(" "),l("li",[_._v("根据QueryWrapper统计数量")]),_._v(" "),l("li",[_._v("资源访问鉴权")])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("逻辑删除")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：增加is_deleted字段")]),_._v(" "),l("li",[_._v("具体实现：使用Mybatis-Plus的@TableLogic注解修饰实体类的deleted字段，然后通过Mybatis-Plus自带方法删除和查找会自动附带逻辑删除功能（自己写的xml不会）。3.1.1之前的版本还需要注入 LogicSqlInjector。")])])]),_._v(" "),l("li",[l("p",[_._v("乐观锁实现")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：增加version字段")]),_._v(" "),l("li",[_._v("具体实现：使用Mybatis-Plus的@Version注解修饰实体类的version字段，并注入 OptimisticLockerInterceptor。")])])]),_._v(" "),l("li",[l("p",[_._v("数据库的唯一索引、联合唯一索引与逻辑删除的兼容性问题")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：定义逻辑唯一索引和逻辑联合索引")]),_._v(" "),l("li",[_._v("具体实现：在Dto基类中定义 uniqueFields 和 unionKeyFields 方法用来标识逻辑唯一索引和联合唯一索引。Dto类按需重写这两个方法进行标识。")])])]),_._v(" "),l("li",[l("p",[_._v("并发场景下的批量数据更新操作可能导致的死锁问题")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：批量待更新数据排序之后再执行更新操作")]),_._v(" "),l("li",[_._v("具体实现：Dto基类中定义 comparator 方法返回Dto对象的默认 Comparator 实现。Dto类按需重写该方法以实现排序时的比较逻辑。")])])]),_._v(" "),l("li",[l("p",[_._v("逻辑删除导致的数据更新查重问题")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：在代码层面使用逻辑查重")]),_._v(" "),l("li",[_._v("具体实现：根据 uniqueFields 和 unionKeyFields 进行逻辑查重，从而避免数据库唯一索引或者唯一联合索引导致的数据更新冲突。")])])]),_._v(" "),l("li",[l("p",[_._v("批量更新时的数据去重")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：在代码层面使用逻辑去重")]),_._v(" "),l("li",[_._v("具体实现：根据 uniqueFields 和 unionKeyFields 进行Dto集合的逻辑去重。")])])]),_._v(" "),l("li",[l("p",[_._v("审计功能")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：使用框架自带的字段填充功能或者hook方法写入")]),_._v(" "),l("li",[_._v("具体实现：使用Mybatis-Plus的@TableField注解并结合自定义的 MetaObjectHandler 实现指定字段自动填充。")])])]),_._v(" "),l("li",[l("p",[_._v("审计日志")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：在数据更新逻辑中增加 hook 方法")]),_._v(" "),l("li",[_._v("具体实现：定义AuditLogger接口，并在数据更新逻辑中调用 AuditLogger的 log 方法。配置不同实体类与 AuditLogger实现的对应关系，或者使用全局 AuditLogger。")])])])]),_._v(" "),l("h2",{attrs:{id:"_2、缓存服务设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_2、缓存服务设计"}},[_._v("#")]),_._v(" 2、缓存服务设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-2"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("缓存数据设置")]),_._v(" "),l("li",[_._v("缓存数据获取")]),_._v(" "),l("li",[_._v("本地-分布式 两级缓存结构")]),_._v(" "),l("li",[_._v("根据待缓存数据自动选择合适的缓存数据类型进行存储")]),_._v(" "),l("li",[_._v("业务层与缓存层解耦")]),_._v(" "),l("li",[_._v("缓存管理和监控平台，方便的查询、管理和监控线上缓存数据")])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑-2"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑-2"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("本地-分布式 两级缓存结构的兼容策略")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：优先级 本地 > 分布式")]),_._v(" "),l("li",[_._v("具体实现：\n"),l("ul",[l("li",[_._v("更新操作：\n"),l("ul",[l("li",[_._v("更新数据库；")]),_._v(" "),l("li",[_._v("删除本地缓存和分布式缓存。")])])]),_._v(" "),l("li",[_._v("查询操作：\n"),l("ul",[l("li",[_._v("查询本地缓存；")]),_._v(" "),l("li",[_._v("本地缓存命中，返回缓存数据；")]),_._v(" "),l("li",[_._v("本地缓存未命中，查询分布式缓存；")]),_._v(" "),l("li",[_._v("分布式缓存命中，更新本地缓存，返回缓存数据；")]),_._v(" "),l("li",[_._v("分布式缓存未命中，查询数据库，更新本地缓存和分布式缓存，返回数据。")])])])])])])]),_._v(" "),l("li",[l("p",[_._v("缓存数据类型自动适配")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：约定不同平台数据类型的对应关系")]),_._v(" "),l("li",[_._v("具体实现：约定 Java 中的数据类型与 Redis 数据类型的对应关系，如 Java 中的 List 对应 Redis 中的 List。")])])]),_._v(" "),l("li",[l("p",[_._v("业务层与缓存层解耦")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：业务层中配置是否启用缓存功能以及相应的缓存策略")]),_._v(" "),l("li",[_._v("具体实现：\n"),l("ul",[l("li",[_._v("业务层的缓存配置信息的设置可以使用配置文件和自定义注解进行实现。")]),_._v(" "),l("li",[_._v("使用 Spring Boot Starter 技术根据配置信息（如是否启用缓存功能）自动装配缓存配置 Configuration 类，Configuration 类中按需注入相关 Bean。")]),_._v(" "),l("li",[_._v("在切面中编写缓存数据设置及获取的具体实现逻辑。")])])])])]),_._v(" "),l("li",[l("p",[_._v("缓存穿透")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("解决思路：BloomFilter（布隆过滤）+ 缓存空值")])]),_._v(" "),l("li",[l("p",[_._v("具体实现：")]),_._v(" "),l("ul",[l("li",[_._v("BloomFilter：BloomFilter 类似于一个 hbase set 用来判断某个元素（key）是否存在于某个集合中。这种方式在大数据场景应用比较多，比如 Hbase 中使用它去判断数据是否在磁盘上。还有在爬虫场景判断 url 是否已经被爬取过。这种方案可以加在第一种方案中，在缓存之前在加一层 BloomFilter ，在查询的时候先去 BloomFilter 去查询 key 是否存在，如果不存在就直接返回，存在再走查缓存 -> 查 DB。")]),_._v(" "),l("li",[_._v("缓存空值：之所以会发生穿透，就是因为缓存中没有存储这些空数据的 key。从而导致每次查询都到数据库去了。那么我们就可以为这些 key 对应的值设置为 null 丢到缓存里面去。后面再出现查询这个 key 的请求的时候，直接返回null 。这样，就不用在到数据库中去走一圈了，但是别忘了设置过期时间。")]),_._v(" "),l("li",[_._v("流程图：")])]),_._v(" "),l("p",[l("img",{attrs:{src:"/images/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png",alt:"缓存穿透解决方案"}})])])])]),_._v(" "),l("li",[l("p",[_._v("缓存雪崩")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：互斥锁")]),_._v(" "),l("li",[_._v("具体实现：多个线程同时去查询数据库的某条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。其他的线程走到这一步拿不到锁就等着，等第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有缓存了，就直接走缓存。")])])]),_._v(" "),l("li",[l("p",[_._v("缓存击穿")]),_._v(" "),l("ul",[l("li",[l("p",[_._v("解决思路：")]),_._v(" "),l("ul",[l("li",[_._v("事前：使用缓存集群，保证缓存服务的高可用")]),_._v(" "),l("li",[_._v("事中：本地缓存 + 限流&降级")]),_._v(" "),l("li",[_._v("事后：开启Redis持久化机制，尽快恢复缓存集群")])])]),_._v(" "),l("li",[l("p",[_._v("具体实现：")]),_._v(" "),l("ul",[l("li",[_._v("事前：搭建Redis集群实现Redis服务的高可用")]),_._v(" "),l("li",[_._v("事中：在Redis集群完全不可用的时候，使用本地缓存还能够支撑一阵。使用限流&降级，保证数据库在面对大量请求还能提供服务。")]),_._v(" "),l("li",[_._v("事后：一旦重启，就能从磁盘上自动加载数据恢复内存中的数据。")]),_._v(" "),l("li",[_._v("流程图：")])]),_._v(" "),l("p",[l("img",{attrs:{src:"/images/%E5%9F%BA%E7%A1%80%E7%BB%84%E4%BB%B6%E8%AE%BE%E8%AE%A1/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88.png",alt:"缓存击穿解决方案"}})])])])]),_._v(" "),l("li",[l("p",[_._v("根据Key前缀模糊删除")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：模糊查找 + 批量删除key")]),_._v(" "),l("li",[_._v("具体实现：先根据Key前缀进行模糊查找，批量删除匹配到的Key。")])])])]),_._v(" "),l("h2",{attrs:{id:"_3、任务调度服务设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_3、任务调度服务设计"}},[_._v("#")]),_._v(" 3、任务调度服务设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-3"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-3"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("任务管理\n"),l("ul",[l("li",[_._v("执行器")])])]),_._v(" "),l("li",[_._v("执行器管理")]),_._v(" "),l("li",[_._v("日志管理\n"),l("ul",[l("li",[_._v("调度日志")]),_._v(" "),l("li",[_._v("执行日志")])])]),_._v(" "),l("li",[_._v("运行报表")]),_._v(" "),l("li",[_._v("失败告警")]),_._v(" "),l("li",[_._v("调度中心\n"),l("ul",[l("li",[_._v("数据中心")]),_._v(" "),l("li",[_._v("调度器")]),_._v(" "),l("li",[_._v("任务回调处理")])])]),_._v(" "),l("li",[_._v("执行器\n"),l("ul",[l("li",[_._v("调度请求")]),_._v(" "),l("li",[_._v("JobHandler")]),_._v(" "),l("li",[_._v("任务回调")])])])]),_._v(" "),l("h2",{attrs:{id:"_4、数据权限设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_4、数据权限设计"}},[_._v("#")]),_._v(" 4、数据权限设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-4"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-4"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("部门权限过滤\n"),l("ul",[l("li",[_._v("权限范围（设置到员工，默认是员工所属部门及下属部门）\n"),l("ul",[l("li",[_._v("仅自己（部门权限内且创建人是自己的）")]),_._v(" "),l("li",[_._v("指定部门（按分配的部门用in过滤，不包含下级）")]),_._v(" "),l("li",[_._v("指定部门及下属部门（按分配的部门用in过滤，包含下级部门）")]),_._v(" "),l("li",[_._v("所有部门（可查看所有部门）")])])])])]),_._v(" "),l("li",[_._v("特殊对象权限过滤\n"),l("ul",[l("li",[_._v("指定对象\n"),l("ul",[l("li",[_._v("用户（可多个）")]),_._v(" "),l("li",[_._v("角色（可多个）")])])]),_._v(" "),l("li",[_._v("权限范围（同上述的部门权限范围）")])])]),_._v(" "),l("li",[_._v("业务关联对象权限过滤\n"),l("ul",[l("li",[_._v("门店权限过滤")]),_._v(" "),l("li",[_._v("仓库权限过滤")])])])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑-3"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑-3"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("过滤策略的存储")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：数据库 + 缓存")]),_._v(" "),l("li",[_._v("具体实现：对象的权限范围信息保存至数据库，不同对象按照权限范围查询出相关参数并保存到缓存，更新对象的过滤策略时自动更新相应缓存。")])])]),_._v(" "),l("li",[l("p",[_._v("权限过滤的具体实现")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：权限过滤注解 + 查询方法切面")]),_._v(" "),l("li",[_._v('具体实现：在业务ServiceImpl类上添加自定义权限过滤注解 @AuthFilter(name = "entity")（注解中的name参数用于将数据库中的过滤策略与实体类关联起来），在 AuthFilterAspect 切面的 before 增强中获取过滤策略并转成查询条件存入 ThreadLocal 变量中，查询方法执行实际的业务逻辑从 ThreadLocal 中获取查询条件转换并拼接至 QueryWrapper 对象，使用拼接后的 QueryWrapper 对象进行查询。')])])])]),_._v(" "),l("h2",{attrs:{id:"_5、推送服务设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_5、推送服务设计"}},[_._v("#")]),_._v(" 5、推送服务设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-5"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-5"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("移动APP通知推送")]),_._v(" "),l("li",[_._v("Web网页消息推送")]),_._v(" "),l("li",[_._v("短信发送")]),_._v(" "),l("li",[_._v("短信回复统一处理")]),_._v(" "),l("li",[_._v("邮件发送")])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑-4"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑-4"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("批量消息并行推送")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：多线程 + 消息队列")]),_._v(" "),l("li",[_._v("具体实现：使用多线程将批量消息打入消息队列，消息队列监听端接收消息后使用多线程执行具体的消息推送逻辑。")])])]),_._v(" "),l("li",[l("p",[_._v("消息多渠道推送")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：PushProps设置多个推送渠道（如短信、邮件）")]),_._v(" "),l("li",[_._v("具体实现：同一条消息根据PushProps中设置的多个推送渠道分别进行推送。")])])]),_._v(" "),l("li",[l("p",[_._v("延迟（定时）推送")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：延迟队列")]),_._v(" "),l("li",[_._v("具体实现：PushProps设置延迟推送相关参数，使用延迟队列实现延迟消息推送。")])])])]),_._v(" "),l("h2",{attrs:{id:"_6、文件服务设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_6、文件服务设计"}},[_._v("#")]),_._v(" 6、文件服务设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-6"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-6"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("上传文件")]),_._v(" "),l("li",[_._v("下载文件")]),_._v(" "),l("li",[_._v("防盗链：通过设置Policy，将对象的访问权限限制在某些网站，或者某些IP段，从而对数据起到保护作用，防止对象被过度下载，以保护客户利益。")]),_._v(" "),l("li",[_._v("租户隔离：支持创建多个子租户，每个子租户都有独立的访问口令，并且只能访问属于自己的存储空间，实现数据访问隔离。")]),_._v(" "),l("li",[_._v("日志记录：记录访问请求的信息，包括请求时间、数据量大小、对象名称等。通过分析日志得到有价值的业务信息，如用户来源、使用习惯、恶意攻击等。")]),_._v(" "),l("li",[_._v("图片处理：可以对存储的图片进行处理，例如图片缩略、格式转换、裁剪、缩放、水印等。")])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑-5"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑-5"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("用户访问权限控制")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：访问文件时先进行鉴权")]),_._v(" "),l("li",[_._v("具体实现：定义文件访问权限信息并进行持久化，向指定目标用户执行授权操作。用户访问文件时先通过 checkAccess 方法进行鉴权。")])])]),_._v(" "),l("li",[l("p",[_._v("防盗链")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：增加IP白名单过滤")]),_._v(" "),l("li",[_._v("具体实现：访问文件时在文件服务的拦截器中进行访问IP的白名单校验，校验通过才允许进行访问。")])])]),_._v(" "),l("li",[l("p",[_._v("租户隔离")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：指定租户对应的fastdfs的store_group")]),_._v(" "),l("li",[_._v("具体实现：上传文件、访问文件时在文件服务的拦截器中指定租户的store_group。")])])]),_._v(" "),l("li",[l("p",[_._v("图片尺寸转换")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：访问时转换图片尺寸")]),_._v(" "),l("li",[_._v("具体实现：访问图片文件时如果指定了图片尺寸参数（长和宽），则从fastdfs取到图片后通过图片工具转换成指定的尺寸之后再返回。")])])])]),_._v(" "),l("h2",{attrs:{id:"_7、消息队列服务设计"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#_7、消息队列服务设计"}},[_._v("#")]),_._v(" 7、消息队列服务设计")]),_._v(" "),l("h3",{attrs:{id:"核心功能-7"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#核心功能-7"}},[_._v("#")]),_._v(" 核心功能")]),_._v(" "),l("ul",[l("li",[_._v("消息发布")]),_._v(" "),l("li",[_._v("消息订阅")]),_._v(" "),l("li",[_._v("延迟队列")]),_._v(" "),l("li",[_._v("重试队列")]),_._v(" "),l("li",[_._v("顺序队列")])]),_._v(" "),l("h3",{attrs:{id:"关键实现逻辑-6"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#关键实现逻辑-6"}},[_._v("#")]),_._v(" 关键实现逻辑")]),_._v(" "),l("ol",[l("li",[l("p",[_._v("延迟队列")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：使用RabbitMQ死信队列")]),_._v(" "),l("li",[_._v("具体实现：Queue中配置参数 "),l("code",[_._v("x-dead-letter-exchange")]),_._v("、"),l("code",[_._v("x-dead-letter-routing-key")]),_._v("，发送消息时给消息设置延迟毫秒值 "),l("code",[_._v("message.getMessageProperties().setExpiration(delayMillis);")])])])]),_._v(" "),l("li",[l("p",[_._v("重试队列")]),_._v(" "),l("ul",[l("li",[_._v("解决思路：缓存 + RabbitMQ confirmCallback")]),_._v(" "),l("li",[_._v("具体实现：发送可重试消息时缓存 "),l("code",[_._v("message")]),_._v(" 和 "),l("code",[_._v("retryProps")]),_._v("，消息接收成功删除相关缓存，消费接收失败则读取缓存中的 "),l("code",[_._v("message")]),_._v(" 和 "),l("code",[_._v("retryProps")]),_._v(" 并执行重试操作。")])])])])])}),[],!1,null,null,null);v.default=t.exports}}]);